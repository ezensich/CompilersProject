// CUP specification for a simple expression evaluator (w/ actions)

import java_cup.runtime.*;

parser code  {: 
  public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error ");

    if (info instanceof java_cup.runtime.Symbol) 
      m.append( "("+info.toString()+")" );
     
    m.append(" : "+message);
   
    System.out.println(m);
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }
:};


/* Terminals (tokens returned by the scanner). */

terminal Integer INTEGER_LITERAL;
terminal Float FLOAT_LITERAL;
terminal Boolean BOOLEAN_LITERAL;


/* Non-terminals */
non terminal expr;


/* The grammar */

//Ejemplo que permite analizar un texto de float, boolean e integer solamente, con espacios y comentarios adem√°s.
expr ::= FLOAT_LITERAL:f {: System.out.print(" " + f); :}
		| INTEGER_LITERAL:i {: System.out.print(" " + i); :}
		| BOOLEAN_LITERAL:b {: System.out.print(" " + b); :}
		| FLOAT_LITERAL:f expr {: System.out.print(" " + f); :}
        | INTEGER_LITERAL:i expr {: System.out.print(" " + i); :}
		| BOOLEAN_LITERAL:b expr {: System.out.print(" " + b); :}
        ;









