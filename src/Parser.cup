// CUP specification for a simple expression evaluator (w/ actions)

import java_cup.runtime.*;

parser code  {: 
  public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error ");

    if (info instanceof java_cup.runtime.Symbol) 
      m.append( "("+info.toString()+")" );
     
    m.append(" : "+message);
   
    System.out.println(m);
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }
:};


/* Terminals (tokens returned by the scanner). */

/* keywords terminal */

terminal BOOL, BREAK, CLASS, CONTINUE, ELSE, FALSE, FLOAT, FOR, IF, INTEGER, RETURN, TRUE, VOID, WHILE, EXTERN;

/* operations terminal */

terminal MINUS, PLUS, PRODUCT, DIVIDE, MOD;
terminal LESS, HIGH, LESS_EQ, HIGH_EQ;
terminal EQUAL, DISTINCT;
terminal AND, OR;
terminal ASSIGN, INC, DEC;

/* literals */
terminal INTEGER_LITERAL;
terminal FLOAT_LITERAL;
terminal BOOLEAN_LITERAL;




/* Non-terminals */
non terminal expr;


/* The grammar */

//example
expr ::= FLOAT_LITERAL:f {: System.out.print(" " + f); :}
		| KEYWORDS:keywords {: System.out.print(" " + keywords); :}
		| INTEGER_LITERAL:i {: System.out.print(" " + i); :}
		| BOOLEAN_LITERAL:b {: System.out.print(" " + b); :}
		| FLOAT_LITERAL:f expr {: System.out.print(" " + f); :}
        | INTEGER_LITERAL:i expr {: System.out.print(" " + i); :}
		| BOOLEAN_LITERAL:b expr {: System.out.print(" " + b); :}
		| KEYWORDS:keywords expr {: System.out.print(" " + keywords); :}
		
        ;









