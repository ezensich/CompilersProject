// CUP specification for a simple expression evaluator (w/ actions)
package compilers;

import compilers.ast.enumerated_types.*;
import compilers.ast.*;
import compilers.data_structures.*;
import java_cup.runtime.*;
import java.util.List;

parser code  {: 

	public static Program ast;

	public Program getAST(){
	  return ast;
	}

	/* override error routines */

  public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error ");
    if (info instanceof java_cup.runtime.Symbol) {
     int column = ((java_cup.runtime.Symbol) info).right + 1; //num of column
     int line = ((java_cup.runtime.Symbol) info).left + 1;//num of line
     Object value = ((java_cup.runtime.Symbol) info).value;//value
     m.append("in ");
     m.append( "Line: "+(line + 1)+" " );
     m.append( "Column: "+(column + 1)+" " );
     m.append( "Value: "+value.toString()+" " );
     System.out.println(m);
    }
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  } 
  
  
:};

/* Terminals (tokens returned by the scanner). */

/* keywords terminal */

terminal BOOL, BREAK, CLASS, CONTINUE, ELSE, FOR, IF, RETURN, VOID, WHILE, EXTERN;
terminal POINT, COMA, LPAR, RPAR, LKEY, RKEY, LBRACKET, RBRACKET, NOT, SEMICOLON;
terminal String TRUE, FALSE, ID, FLOAT, INTEGER;


/* operations terminal */

terminal MINUS, UMINUS, PLUS, PRODUCT, DIVIDE, MOD;
terminal LESS, HIGH, LESS_EQ, HIGH_EQ;
terminal EQUAL, DISTINCT;
terminal AND, OR;
terminal ASSIGN, INC, DEC;

/* literals */
terminal String INTEGER_LITERAL;
terminal Float FLOAT_LITERAL;

/* Non-terminals */
non terminal Program program;
non terminal DeclarationClass class_decl;
non terminal FieldDeclaration field_decl;
non terminal FieldDeclarationList field_decls;
non terminal Identifier identifier;
non terminal IdentifiersList identifiers;
non terminal MethodDeclaration method_decl;
non terminal MethodDeclarationList method_decls;
non terminal ArgumentDeclaration arguments_decl;
non terminal GenericType type;
non terminal Block block; 
non terminal Body body;
non terminal Statement statement;
non terminal StatementList statements;
non terminal Expression expr;
non terminal ExpressionList exprs;
non terminal LocationExpr location;
non terminal Expression method_call;
non terminal IdName id;
non terminal Literal literal;
non terminal BoolLiteral boolean_literal;
non terminal AssignOpType assing_op;

/* Precedences (in order from lowest to highest priority) */

precedence left + 1 OR;
precedence left + 1 AND;
precedence nonassoc EQUAL, DISTINCT;
precedence nonassoc LESS, HIGH, LESS_EQ, HIGH_EQ; 
precedence left + 1 MINUS, PLUS;
precedence left + 1 UMINUS;
precedence left + 1 PRODUCT, DIVIDE, MOD;
precedence left + 1 ELSE;


/* The grammar */
			
start with program;			
		
program ::= class_decl:c {: ast = new Program(c); :}
		| class_decl:c program:p {: p.addDeclarationClass(c); RESULT = p; :}
		;

class_decl ::= CLASS ID:i LKEY  RKEY {: RESULT = new DeclarationClass(new IdName(i),null,null); :}
		| CLASS ID:i LKEY field_decls:fd RKEY {: RESULT = new DeclarationClass(new IdName(i),fd,null); :}
		| CLASS ID:i LKEY method_decls:md RKEY {: RESULT = new DeclarationClass(new IdName(i),null,md); :}
		| CLASS ID:i LKEY field_decls:fd method_decls:md RKEY {: RESULT = new DeclarationClass(new IdName(i),fd,md); :}
		;

field_decls ::= field_decl:fd {: RESULT = new FieldDeclarationList(fd); :}
		| field_decls:fdlist field_decl:fd {: fdlist.addFieldDecToList(fd); :} 
		;

field_decl ::= type:t identifiers:i SEMICOLON {: RESULT = new FieldDeclaration(t,i); :}
		;

identifiers ::= identifier:id {: RESULT = new IdentifiersList(id); :}
		| identifiers:list COMA identifier:i {: list.addIdentifierToList(i); RESULT = list; :}
		;

identifier ::= ID:i {: RESULT = new Identifier(new IdName(i),ileft + 1,iright + 1); :}
		| ID:i LBRACKET INTEGER_LITERAL:n RBRACKET {: RESULT = new Identifier(new IdName(i),new IntegerLiteral(n,ileft + 1,iright + 1),ileft + 1,iright + 1); :}
		;

method_decls ::= method_decl:md {: RESULT = new MethodDeclarationList(md); :}
		| method_decls:list method_decl:md {: list.addMethodDecToList(md); RESULT = list; :}
		;		

method_decl ::= type:t ID:i LPAR RPAR body:b {: RESULT = new MethodDeclaration(new IdName(i),t,b); :}
		| type:t ID:i LPAR arguments_decl:a RPAR body:b {: RESULT = new MethodDeclaration(new IdName(i),t,a,b); :}
		;
		
arguments_decl ::= type:t ID:i {: RESULT = new ArgumentDeclaration(new Parameter(t,new IdName(i))); :}
		| arguments_decl:list COMA type:t ID:i {: list.addArgumentDec(new Parameter(t,new IdName(i))); RESULT = list; :}
		;

body ::= block:b {: RESULT = new Body(b); :}
		| EXTERN SEMICOLON {: Body body = new Body(); body.setIsExternTrue(); RESULT = body; :}
		;
		
block ::= LKEY RKEY
		| LKEY field_decls:fds RKEY {: RESULT = new Block(null, fds); :}
		| LKEY statements:stmts RKEY {: RESULT = new Block(stmts, null); :}
		| LKEY field_decls:fds statements:stmts RKEY {: RESULT = new Block(stmts, fds); :}
		;

        
type ::= INTEGER {: RESULT = new GenericType(Type.INTEGER.toString()); :}
		| FLOAT {: RESULT = new GenericType(Type.FLOAT.toString()); :}
		| BOOL {: RESULT = new GenericType(Type.BOOL.toString()); :}
		| VOID {: RESULT = new GenericType(Type.VOID.toString()); :}
		| ID:i {: RESULT = new GenericType(i); :}
		;

statements ::= statement:stmt {: RESULT = new StatementList(stmt); :}
		| statements:stmts statement:stmt {: stmts.addStatementToList(stmt); RESULT = stmts;  :}
		;
		
statement ::= location:loc assing_op:op expr:exp SEMICOLON {:RESULT =  new AssignStmt(exp,loc,op,locleft + 1,locright + 1);:}
		| method_call:mc SEMICOLON {: RESULT = new MethodCallStmt(mc); :}
		| IF LPAR expr:cond RPAR statement:stmt {: RESULT = new IfStmt(cond,stmt); :}
		| IF LPAR expr:cond RPAR statement:ifStmt ELSE statement:elseStmt {: RESULT = new IfStmt(cond,ifStmt,elseStmt); :}
		| FOR ID:i ASSIGN expr:exp1 COMA expr:exp2 statement:forStmt {: RESULT = new ForStmt(new IdName(i),exp1,exp2,forStmt); :}
		| WHILE expr:expr statement:stmt {: RESULT = new WhileStmt(expr,stmt); :}
		| RETURN SEMICOLON {: RESULT = new ReturnStmt(); :}
		| RETURN expr:e SEMICOLON {: RESULT = new ReturnStmt(e); :}
		| BREAK SEMICOLON {: RESULT = new BreakStmt(); :}
		| CONTINUE SEMICOLON {: RESULT = new ContinueStmt(); :}
		| SEMICOLON {: RESULT = new SemicolonStmt(); :}
		| block:b {: RESULT = b; :}
		;
		
method_call ::= id:i LPAR RPAR {: RESULT = new MethodCallExpr(i,ileft + 1,iright + 1); :}
		| id:i LPAR exprs:e RPAR {: RESULT = new MethodCallExpr(i,e,ileft + 1,iright + 1); :}
		;

exprs ::= expr:e {: RESULT = new ExpressionList(e); :}
		| exprs:es COMA expr:e {: es.addExpressionToList(e); RESULT = es; :}
		;

location ::= id:i {: RESULT = new LocationExpr(i,ileft + 1,iright + 1); :}
		| id:i LBRACKET expr:e RBRACKET {: RESULT = new LocationExpr(i,e,ileft + 1,iright + 1); :}
		;

id ::= ID:i {: RESULT = new IdName(i); :}
		| ID:i POINT id:ObjId {: ObjId.extendId(i); RESULT = ObjId; :} 
		;
		
expr ::= location:loc {: RESULT = loc; :}
		| method_call:mc {: RESULT = mc; :}
		| literal:lit {: RESULT = lit; :}
		| expr:e1 PLUS expr:e2 {: RESULT = new BinOpExpr(e1,BinOpType.PLUS,e2,e1left + 1,e1right + 1); :}
		| expr:e1 MINUS expr:e2 {: RESULT = new BinOpExpr(e1,BinOpType.MINUS,e2,e1left + 1,e1right + 1); :}
		| expr:e1 PRODUCT expr:e2 {: RESULT = new BinOpExpr(e1,BinOpType.PRODUCT,e2,e1left + 1,e1right + 1); :}
		| expr:e1 DIVIDE expr:e2 {: RESULT = new BinOpExpr(e1,BinOpType.DIVIDE,e2,e1left + 1,e1right + 1); :}
		| expr:e1 MOD expr:e2 {: RESULT = new BinOpExpr(e1,BinOpType.MOD,e2,e1left + 1,e1right + 1); :}
		| expr:e1 LESS expr:e2 {: RESULT = new BinOpExpr(e1,BinOpType.LESS,e2,e1left + 1,e1right + 1); :}
		| expr:e1 HIGH expr:e2 {: RESULT = new BinOpExpr(e1,BinOpType.HIGH,e2,e1left + 1,e1right + 1); :}
		| expr:e1 LESS_EQ expr:e2 {: RESULT = new BinOpExpr(e1,BinOpType.LESS_EQ,e2,e1left + 1,e1right + 1); :}
		| expr:e1 HIGH_EQ expr:e2 {: RESULT = new BinOpExpr(e1,BinOpType.HIGH_EQ,e2,e1left + 1,e1right + 1); :}
		| expr:e1 EQUAL expr:e2 {: RESULT = new BinOpExpr(e1,BinOpType.EQUAL,e2,e1left + 1,e1right + 1); :}
		| expr:e1 DISTINCT expr:e2 {: RESULT = new BinOpExpr(e1,BinOpType.DISTINCT,e2,e1left + 1,e1right + 1); :}
		| expr:e1 AND expr:e2 {: RESULT = new BinOpExpr(e1,BinOpType.AND,e2,e1left + 1,e1right + 1); :}
		| expr:e1 OR expr:e2 {: RESULT = new BinOpExpr(e1,BinOpType.OR,e2,e1left + 1,e1right + 1); :}
		| MINUS expr:e1 {: RESULT = new UnaryOpExpr(e1,UnaryOpType.MINUS,e1left + 1,e1right + 1); :} %prec UMINUS 
		| NOT expr:e1 {: RESULT = new UnaryOpExpr(e1,UnaryOpType.NOT,e1left + 1,e1right + 1); :} %prec UMINUS
		| LPAR expr:e RPAR {: RESULT = e; :}
		;	      

assing_op ::= ASSIGN {: RESULT = AssignOpType.ASSIGN; :}
		| INC {: RESULT = AssignOpType.INC; :}
		| DEC {: RESULT = AssignOpType.DEC; :}
		;

literal ::= FLOAT_LITERAL:f {: RESULT = new FloatLiteral(f,fleft + 1,fright + 1); :}
		| boolean_literal:b {: RESULT = b; :}
		| INTEGER_LITERAL:i {: RESULT = new IntegerLiteral(i,ileft + 1,iright + 1); :}
		;

boolean_literal ::= TRUE:t {: RESULT = new BoolLiteral(t,tleft + 1,tright + 1); :}
		| FALSE:f {: RESULT = new BoolLiteral(f,fleft + 1,fright + 1); :}
		;
